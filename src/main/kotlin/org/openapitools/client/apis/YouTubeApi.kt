/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ApplicationNotFound
import org.openapitools.client.models.FailedToCheckSubscriptionYouTube
import org.openapitools.client.models.InvalidParameter
import org.openapitools.client.models.MyApplications401Response
import org.openapitools.client.models.UserIsMemberYouTube404Response
import org.openapitools.client.models.UserIsMemberYouTube500Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class YouTubeApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.minecraftauth.me/v1")
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube/member/{tier}
     * User is member at tier
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param tier 
     * @param xSignature 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userIsMemberAtTierYouTube(fromPlatform: kotlin.String, fromUserId: kotlin.String, tier: kotlin.String, xSignature: kotlin.String) : Unit {
        val localVarResponse = userIsMemberAtTierYouTubeWithHttpInfo(fromPlatform = fromPlatform, fromUserId = fromUserId, tier = tier, xSignature = xSignature)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube/member/{tier}
     * User is member at tier
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param tier 
     * @param xSignature 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun userIsMemberAtTierYouTubeWithHttpInfo(fromPlatform: kotlin.String, fromUserId: kotlin.String, tier: kotlin.String, xSignature: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = userIsMemberAtTierYouTubeRequestConfig(fromPlatform = fromPlatform, fromUserId = fromUserId, tier = tier, xSignature = xSignature)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userIsMemberAtTierYouTube
     *
     * @param fromPlatform 
     * @param fromUserId 
     * @param tier 
     * @param xSignature 
     * @return RequestConfig
     */
    fun userIsMemberAtTierYouTubeRequestConfig(fromPlatform: kotlin.String, fromUserId: kotlin.String, tier: kotlin.String, xSignature: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xSignature.apply { localVariableHeaders["X-Signature"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{fromPlatform}/{fromUserId}/youtube/member/{tier}".replace("{"+"fromPlatform"+"}", encodeURIComponent(fromPlatform.toString())).replace("{"+"fromUserId"+"}", encodeURIComponent(fromUserId.toString())).replace("{"+"tier"+"}", encodeURIComponent(tier.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube/member
     * User is member
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userIsMemberYouTube(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : Unit {
        val localVarResponse = userIsMemberYouTubeWithHttpInfo(fromPlatform = fromPlatform, fromUserId = fromUserId, xSignature = xSignature)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube/member
     * User is member
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun userIsMemberYouTubeWithHttpInfo(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = userIsMemberYouTubeRequestConfig(fromPlatform = fromPlatform, fromUserId = fromUserId, xSignature = xSignature)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userIsMemberYouTube
     *
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return RequestConfig
     */
    fun userIsMemberYouTubeRequestConfig(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xSignature.apply { localVariableHeaders["X-Signature"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{fromPlatform}/{fromUserId}/youtube/member".replace("{"+"fromPlatform"+"}", encodeURIComponent(fromPlatform.toString())).replace("{"+"fromUserId"+"}", encodeURIComponent(fromUserId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube
     * User is subscribed
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userIsSubscribedYouTube(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : Unit {
        val localVarResponse = userIsSubscribedYouTubeWithHttpInfo(fromPlatform = fromPlatform, fromUserId = fromUserId, xSignature = xSignature)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/youtube
     * User is subscribed
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun userIsSubscribedYouTubeWithHttpInfo(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = userIsSubscribedYouTubeRequestConfig(fromPlatform = fromPlatform, fromUserId = fromUserId, xSignature = xSignature)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userIsSubscribedYouTube
     *
     * @param fromPlatform 
     * @param fromUserId 
     * @param xSignature 
     * @return RequestConfig
     */
    fun userIsSubscribedYouTubeRequestConfig(fromPlatform: kotlin.String, fromUserId: kotlin.String, xSignature: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xSignature.apply { localVariableHeaders["X-Signature"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{fromPlatform}/{fromUserId}/youtube".replace("{"+"fromPlatform"+"}", encodeURIComponent(fromPlatform.toString())).replace("{"+"fromUserId"+"}", encodeURIComponent(fromUserId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
