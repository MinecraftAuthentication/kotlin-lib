/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.GuildNotAuthorized
import org.openapitools.client.models.InvalidParameter
import org.openapitools.client.models.MyApplications401Response
import org.openapitools.client.models.MyApplications404Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DiscordApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.minecraftauth.me/v1")
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/discord/{serverId}
     * User in guild
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param xSignature 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun myApplications(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, xSignature: kotlin.String) : Unit {
        val localVarResponse = myApplicationsWithHttpInfo(fromPlatform = fromPlatform, fromUserId = fromUserId, serverId = serverId, xSignature = xSignature)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/discord/{serverId}
     * User in guild
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param xSignature 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun myApplicationsWithHttpInfo(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, xSignature: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = myApplicationsRequestConfig(fromPlatform = fromPlatform, fromUserId = fromUserId, serverId = serverId, xSignature = xSignature)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation myApplications
     *
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param xSignature 
     * @return RequestConfig
     */
    fun myApplicationsRequestConfig(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, xSignature: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xSignature.apply { localVariableHeaders["X-Signature"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{fromPlatform}/{fromUserId}/discord/{serverId}".replace("{"+"fromPlatform"+"}", encodeURIComponent(fromPlatform.toString())).replace("{"+"fromUserId"+"}", encodeURIComponent(fromUserId.toString())).replace("{"+"serverId"+"}", encodeURIComponent(serverId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/discord/{serverId}/role/{roleId}
     * User has role
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param roleId 
     * @param xSignature 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userHasRoleInGuild(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, roleId: kotlin.String, xSignature: kotlin.String) : Unit {
        val localVarResponse = userHasRoleInGuildWithHttpInfo(fromPlatform = fromPlatform, fromUserId = fromUserId, serverId = serverId, roleId = roleId, xSignature = xSignature)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /{fromPlatform}/{fromUserId}/discord/{serverId}/role/{roleId}
     * User has role
     * 
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param roleId 
     * @param xSignature 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun userHasRoleInGuildWithHttpInfo(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, roleId: kotlin.String, xSignature: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = userHasRoleInGuildRequestConfig(fromPlatform = fromPlatform, fromUserId = fromUserId, serverId = serverId, roleId = roleId, xSignature = xSignature)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userHasRoleInGuild
     *
     * @param fromPlatform 
     * @param fromUserId 
     * @param serverId 
     * @param roleId 
     * @param xSignature 
     * @return RequestConfig
     */
    fun userHasRoleInGuildRequestConfig(fromPlatform: kotlin.String, fromUserId: kotlin.String, serverId: kotlin.String, roleId: kotlin.String, xSignature: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xSignature.apply { localVariableHeaders["X-Signature"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{fromPlatform}/{fromUserId}/discord/{serverId}/role/{roleId}".replace("{"+"fromPlatform"+"}", encodeURIComponent(fromPlatform.toString())).replace("{"+"fromUserId"+"}", encodeURIComponent(fromUserId.toString())).replace("{"+"serverId"+"}", encodeURIComponent(serverId.toString())).replace("{"+"roleId"+"}", encodeURIComponent(roleId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
